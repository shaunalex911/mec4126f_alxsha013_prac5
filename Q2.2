// DEFINES AND INCLUDES-------------------------------------------------------|

#define STM32F051
#include "stm32f0xx.h"
#include "lcd_stm32f0.h"
#include <stdint.h>
#define UCT_BOARD

// FUNCTION DECLARATIONS -----------------------------------------------------|

void main(void);
void init_LEDs();
void display_on_LCD(uint8_t number);
void display_on_LEDs(uint8_t number);
void init_switches();
void init_external_interrupts();
void EXTI2_3_IRQHandler(void);


// GLOBAL VARIABLES ----------------------------------------------------------|

unsigned char string[3];
uint8_t count=0;
uint8_t press_count=0;

// MAIN FUNCTION -------------------------------------------------------------|

void main(void)
{
	init_LEDs();
	init_LCD();
	init_switches();
	init_external_interrupts();

	while(1)


	{

		if((press_count%2)!=0){

			if((GPIOA->IDR & GPIO_IDR_1)==0){
			count++;
			display_on_LEDs(count);
			//lcd_command(CLEAR); // clears the LCD screen
			display_on_LCD(count);
			delay(80000);
			}

		else if ((GPIOA->IDR & GPIO_IDR_2)==0){
			count--;
			display_on_LEDs(count);
			display_on_LCD(count);
			delay(80000);
			}}

	 else if ((press_count%2)==0){

		   lcd_command(CLEAR);
		   display_on_LEDs(0);
		   count=0;

	 }

	}


}

//Functions

void display_on_LCD(uint8_t number)
{
	    lcd_command(CLEAR);// clears the LCD screen
	    sprintf(string,"%d", count); //creates a string of the number so it can be displayed on lcd
		lcd_putstring(string); // displays the string onto the LCD
		}



void init_LEDs()
{
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;

	// Setup GPIOB pins 0-7 as outputs
	GPIOB->MODER |= GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
	GPIOB->MODER |= GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0;
}



void display_on_LEDs(uint8_t number)	//prac 1 code						   
{								                                  
#ifdef UCT_BOARD												   
	*(uint8_t *)0x48000414 = number;                              
#else															  
	*(uint8_t *)0x48000814 = number << 8;						   
#endif															   
}                                                                  

void init_switches(){
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN; // enable clock to GPIOA

	// Configure PA1, PA2 to input mode
	GPIOA -> MODER &= ~GPIO_MODER_MODER1;
	GPIOA -> MODER &= ~GPIO_MODER_MODER2;
	GPIOA -> MODER &= ~GPIO_MODER_MODER3;

	// Enable the pull-up resistors for  PA1, PA2
    GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR1_0;
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR2_0;
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR3_0;

}

void init_external_interrupts(){
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN; //enable clock to for system config

	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA; //route PA to EXTI3
	EXTI->IMR |=EXTI_IMR_MR3; //unmask the register
	EXTI->FTSR |=EXTI_FTSR_TR3;  //falling-edge trigger

	NVIC_EnableIRQ(EXTI2_3_IRQn); //enable interrupt on NVIC
}

void EXTI2_3_IRQHandler(){
	//if(EXTI->PR |= EXTI_PR_PR3)
	press_count++ ; //increment button pushes
	display_on_LCD(0);//reset
	delay(80000);
	EXTI->PR |= EXTI_PR_PR3; }//clear interrupt pending bit


